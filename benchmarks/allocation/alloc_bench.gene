# Basic allocation benchmark
# Tests allocation performance without complex operations

(fn array_alloc n
  (var count 0)
  (var i 0)
  (while (< i n)
    (var arr [1 2 3 4 5])
    (count = (+ count 1))
    (i = (+ i 1)))
  count)

(fn map_alloc n
  (var count 0)
  (var i 0)
  (while (< i n)
    (var m {^a 1 ^b 2 ^c 3})
    (count = (+ count 1))
    (i = (+ i 1)))
  count)

(fn gene_alloc n
  (var count 0)
  (var i 0)
  (while (< i n)
    (var g (:test a 1 b 2 c 3))
    (count = (+ count 1))
    (i = (+ i 1)))
  count)

(fn string_alloc n
  (var count 0)
  (var i 0)
  (while (< i n)
    (var s "test string")
    (count = (+ count 1))
    (i = (+ i 1)))
  count)

(fn mixed_alloc n
  (var count 0)
  (var i 0)
  (while (< i n)
    (var arr [1 2 3])
    (var m {^x 1})
    (var s "test")
    (count = (+ count 1))
    (i = (+ i 1)))
  count)

# Run benchmarks
(println "Basic allocation benchmark")

(var result (array_alloc 1000))
(println "Array allocations: " result)

(result = (map_alloc 1000))
(println "Map allocations: " result)

(result = (gene_alloc 1000))
(println "Gene allocations: " result)

(result = (string_alloc 1000))
(println "String allocations: " result)

(result = (mixed_alloc 500))
(println "Mixed allocations: " result)