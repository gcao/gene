# Simplified object pooling benchmark

(var iterations 1000)

# Test array allocation/deallocation patterns
(println "Testing array pooling...")
(var count 0)
(var i 0)
(while (< i iterations)
  # Create array, use it, let it be freed
  (var arr [i (* i 2) (* i 3)])
  (count = (+ count i))
  (i = (+ i 1)))
(println "Array operations completed: " count)

# Test map allocation/deallocation patterns  
(println "Testing map pooling...")
(var count2 0)
(var j 0)
(while (< j iterations)
  # Create map, use it, let it be freed
  (var m {^key j ^value (* j 2)})
  (count2 = (+ count2 j))
  (j = (+ j 1)))
(println "Map operations completed: " count2)

# Test gene allocation/deallocation patterns
(println "Testing gene pooling...")
(var count3 0)
(var k 0)
(while (< k iterations)
  # Create gene, use it, let it be freed
  (var g (:test k (* k 2)))  # Simple gene syntax
  (count3 = (+ count3 k))
  (k = (+ k 1)))
(println "Gene operations completed: " count3)

(println "Pool efficiency test complete")