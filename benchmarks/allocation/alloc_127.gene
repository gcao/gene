# Allocation benchmark for 127 iterations
# Tests pooling effectiveness

# Create and destroy arrays repeatedly
(println "Array allocation test (127 iterations per batch, 10 batches)...")
(var total 0)
(var batch 0)
(while (< batch 10)
  (var i 0)
  (while (< i 127)
    (var arr [1 2 3 4 5])
    (total = (+ total 1))
    (i = (+ i 1)))
  (batch = (+ batch 1)))
(println "Total arrays created: " total)

# Create and destroy maps repeatedly
(println "Map allocation test...")
(total = 0)
(batch = 0)
(while (< batch 10)
  (var i 0)
  (while (< i 127)
    (var m {^x 1 ^y 2 ^z 3})
    (total = (+ total 1))
    (i = (+ i 1)))
  (batch = (+ batch 1)))
(println "Total maps created: " total)

# Mixed allocation pattern
(println "Mixed allocation test...")
(total = 0)
(batch = 0)
(while (< batch 5)
  (var i 0)
  (while (< i 127)
    (var a1 [i (* i 2)])
    (var m1 {^val i})
    (var s1 "test_string")
    (total = (+ total 1))
    (i = (+ i 1)))
  (batch = (+ batch 1)))
(println "Total mixed iterations: " total)

(println "")
(println "Benchmark complete - object pooling should reduce allocation overhead")