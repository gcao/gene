#!/usr/bin/env gene

# AI Model Example
# Building a simple neural network layer in Gene

(println "=== Neural Network Model Example ===")
(println)

# Model architecture parameters
(var input_dim 784)   # MNIST image size (28x28)
(var hidden_dim 256)
(var output_dim 10)   # 10 digit classes

(println "Architecture:")
(println "  Input:" input_dim "neurons")
(println "  Hidden:" hidden_dim "neurons")
(println "  Output:" output_dim "neurons")
(println)

# Initialize model weights
(println "Initializing model...")

(var W1 (tensor/random [input_dim hidden_dim]))
(var b1 (tensor/zeros [hidden_dim]))
(println "  Layer 1: W=" [input_dim hidden_dim] "b=" [hidden_dim])

(var W2 (tensor/random [hidden_dim output_dim]))
(var b2 (tensor/zeros [output_dim]))
(println "  Layer 2: W=" [hidden_dim output_dim] "b=" [output_dim])

# Define activation functions
(fn sigmoid [x] x)  # Placeholder
(fn softmax [x] x)  # Placeholder

# Forward pass function
(fn forward [input]
  (println "  Forward pass...")
  
  # Layer 1: z1 = input @ W1 + b1
  (var z1 (tensor/add (tensor/matmul input W1) b1))
  (var a1 (sigmoid z1))
  
  # Layer 2: z2 = a1 @ W2 + b2
  (var z2 (tensor/add (tensor/matmul a1 W2) b2))
  (var output (softmax z2))
  
  output)

# Run inference on a batch
(println)
(println "Running inference...")

(var batch_size 32)
(var input_batch (tensor/random [batch_size input_dim]))
(println "  Input batch shape:" [batch_size input_dim])

(var predictions (forward input_batch))
(println "  Output shape:" (tensor/shape predictions))

(println)
(println "=== Model Example Complete ===")
true