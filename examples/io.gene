#!/usr/bin/env gene run

# Comprehensive example demonstrating asynchronous file reading in Gene
# This example showcases async/await syntax, error handling, and concurrent operations

(println "=== Gene Asynchronous File I/O Example ===")
(println)

# Test file paths
(var test_file "tests/fixtures/test.txt")
(var gene_file "tests/fixtures/file.gene")
(var nonexistent_file "tests/fixtures/nonexistent.txt")
(var output_file "/tmp/gene_async_test.txt")

# Example 1: Basic synchronous file reading (for comparison)
(println "1. Basic synchronous file reading:")
(println "Reading file:" test_file)
(var sync_content (gene/io/read test_file))
(println "Content read synchronously:")
(println sync_content)
(println)

# Example 2: Basic async file reading
(println "2. Basic async file reading:")
(println "Reading file:" gene_file)

(var future1 (gene/io/read_async gene_file))
(var content1 (await future1))
(println "Content read asynchronously:")
(println content1)
(println)

# Example 3: Async file reading with error handling
(println "3. Async file reading with error handling:")
(println "Attempting to read nonexistent file:" nonexistent_file)

(var future2 (gene/io/read_async nonexistent_file))
# TODO: Method calls with arguments not yet implemented
# (future2 .on_failure (fn [error]
#   (println "Error caught in callback:" error)
# ))

(try
  (var content2 (await future2))
  (println "This should not be reached")
catch *
  (println "Error caught in try/catch:" $ex)
)
(println)

# Example 4: Async file writing and reading
(println "4. Async file writing and reading:")
(var test_content "Hello from Gene async I/O!\nLine 2\nLine 3")
(println "Writing content to:" output_file)

(var write_future (gene/io/write_async output_file test_content))
(await write_future)
(println "Write completed")

(var read_future (gene/io/read_async output_file))
(var read_content (await read_future))
(println "Content read back:")
(println read_content)
(println)

# Example 5: Multiple concurrent file operations
(println "5. Multiple concurrent file operations:")
(println "Starting multiple async reads concurrently...")

# Start multiple async operations
(var future_a (gene/io/read_async test_file))
(var future_b (gene/io/read_async gene_file))
(var future_c (gene/io/read_async output_file))

# Set up success callbacks
(future_a .on_success (content ->
  (println "Future A completed with" (content/.length) "characters")
))

(future_b .on_success (content ->
  (println "Future B completed with" (content/.length) "characters")
))

(future_c .on_success (content ->
  (println "Future C completed with" (content/.length) "characters")
))

# Wait for all to complete
(var content_a (await future_a))
(var content_b (await future_b))
(var content_c (await future_c))

(println "All concurrent operations completed")
(println "Content A length:" (content_a/.length))
(println "Content B length:" (content_b/.length))
(println "Content C length:" (content_c/.length))
(println)

# Example 6: Chaining async operations
(println "6. Chaining async operations:")

(fn process_file_async file_path
  # Read file asynchronously
  (var read_future (gene/io/read_async file_path))

  # Chain processing
  (read_future .on_success (content ->
    (println "Processing file content...")
    (var processed_content (content/.to_upper))
    (var write_future (gene/io/write_async "/tmp/processed.txt" processed_content))
    (write_future .on_success (->
      (println "Processed content written to /tmp/processed.txt")
    ))
    (await write_future)
  ))

  read_future
)

(var chain_future (process_file_async test_file))
(await chain_future)
(println "Chained operations completed")
(println)

# Example 7: Comparison with synchronous operations
(println "7. Comparison with synchronous vs asynchronous:")

# Synchronous version
(println "Synchronous read:")
(var sync_start (gene/time/now))
(var sync_content2 (gene/io/read test_file))
(var sync_end (gene/time/now))
(println "Sync read took:" (sync_end - sync_start) "seconds")
(println "Content length:" (sync_content2/.length))

# Asynchronous version
(println "Asynchronous read:")
(var async_start (gene/time/now))
(var async_future (gene/io/read_async test_file))
(var async_content (await async_future))
(var async_end (gene/time/now))
(println "Async read took:" (async_end - async_start) "seconds")
(println "Content length:" (async_content/.length))
(println)

# Example 8: Future state inspection
(println "8. Future state inspection:")
(var inspect_future (gene/io/read_async test_file))

(println "Future state before await:" (inspect_future/.state))
(var inspect_content (await inspect_future))
(println "Future state after await:" (inspect_future/.state))
(println "Future has value:" (inspect_future/.has_value))
(println)

(println "=== All async file I/O examples completed successfully! ===")
