#!/usr/bin/env gene run

# Working Async Demo for Gene
# This demonstrates the async/await functionality that currently works

(println "=== Gene Async Demo (Working Features) ===")
(println)

# Test 1: Basic async/await
(println "Test 1: Basic async/await")
(var result1 (await (async 42)))
(println "Result 1:" result1)
(println)

# Test 2: Async computation
(println "Test 2: Async computation")
(var result2 (await (async (+ 10 20))))
(println "Result 2:" result2)
(println)

# Test 3: Async function returning a value
(println "Test 3: Async function")
(fn get_async_value []
  (async 100))

(var result3 (await (get_async_value)))
(println "Result 3:" result3)
(println)

# Test 4: Function with parameter returning async
(println "Test 4: Async function with parameter")
(fn multiply_async [x]
  (async (* x 3)))

(var result4 (await (multiply_async 7)))
(println "Result 4:" result4)
(println)

# Test 5: Multiple concurrent async operations
(println "Test 5: Multiple concurrent async operations")
(var future1 (async (+ 2 4)))
(var future2 (async (* 5 4)))
(var future3 (async (- 10 3)))

(println "Created 3 futures")
(var result5a (await future1))
(var result5b (await future2))
(var result5c (await future3))

(println "Result 5a:" result5a)
(println "Result 5b:" result5b)
(println "Result 5c:" result5c)
(println)

# Test 6: Nested async operations
(println "Test 6: Nested async")
(fn outer_async []
  (async 
    (do
      (println "In outer async")
      50)))

(var result6 (await (outer_async)))
(println "Result 6:" result6)
(println)

# Test 7: Async with loop (using correct = syntax)
(println "Test 7: Async with loop")
(fn count_async [max]
  (async 
    (do
      (var count 0)
      (while (< count max)
        (count = (+ count 1)))
      count)))

(var result7 (await (count_async 5)))
(println "Result 7 (counted to):" result7)
(println)

# Test 8: Return string directly (concatenation not yet implemented)
(println "Test 8: Async returning string")
(fn process_string [data]
  (async data))

(var result8 (await (process_string "test_data")))
(println "Result 8:" result8)
(println)

(println "=== All working tests completed successfully! ===")