#!/usr/bin/env gene run

(println "=== Custom Future Example ===")

# Create a custom async function that returns a manually created Future  
(fn delayed_value value
  (var future (new gene/Future))
  
  # Simulate async work by completing the future
  # In real async code, this would be done by an async operation
  (complete_future future value)
  
  future
)

(println "Creating delayed future...")
(var future (delayed_value "Hello from the future!"))
(var state_before (future/.state))
(println "Future state before await:" state_before)

# Check if the future is actually completed
(var state_after (future/.state))
(println "Future state after creation:" state_after)

(println "Awaiting future...")
(var result (await future))
(println "Result:" result)

(println "\n=== Custom Future Example Complete ===")