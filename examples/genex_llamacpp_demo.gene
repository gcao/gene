# Gene Extension: LLaMA.cpp Demo
# ==============================

(println "ðŸš€ Gene Extension System Demo")
(println "Using genex/llamacpp for AI text generation")
(println "=" 45)
(println)

# Check info before loading
(println "ðŸ“Š System Info:")
(var info (genex/llamacpp/info))
(println "  â€¢ Initialized: " (info ^initialized))
(println "  â€¢ Model loaded: " (info ^model_loaded))
(println "  â€¢ Backend: " (info ^backend))
(println)

# Load the model
(println "ðŸ“š Loading model...")
(var load_result (genex/llamacpp/load "models/tinyllama.gguf"))
(println "  Status: " (load_result ^status))
(println "  Path: " (load_result ^path))
(println)

# Generate multiple completions
(println "âœ¨ Generating text completions:")
(println)

(var prompts [
  "The future of artificial intelligence"
  "Once upon a time in a galaxy"
  "The secret to happiness is"
])

(var i 0)
(loop (< i (prompts .length))
  (do
    (var prompt (prompts @ i))
    (println "Prompt " (+ i 1) ": \"" prompt "\"")
    (var generated (genex/llamacpp/generate prompt 25))
    (println "â†’ " generated)
    (println)
    (set i (+ i 1))
  )
)

# Get updated info
(println "ðŸ“Š Updated System Info:")
(var final_info (genex/llamacpp/info))
(println "  â€¢ Model loaded: " (final_info ^model_loaded))
(println "  â€¢ Context ready: " (final_info ^context_ready))
(println)

# Cleanup
(println "ðŸ§¹ Cleaning up...")
(genex/llamacpp/unload)
(println "âœ… Model unloaded")
(println)

(println "ðŸŽ‰ Demo complete!")
(println "The genex/llamacpp extension provides native LLM inference in Gene!")